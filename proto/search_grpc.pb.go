// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/search.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchService_Search_FullMethodName      = "/search.SearchService/Search"
	SearchService_HealthCheck_FullMethodName = "/search.SearchService/HealthCheck"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Search service definitions
type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, SearchService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, SearchService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility.
//
// Search service definitions
type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServiceServer struct{}

func (UnimplementedSearchServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}
func (UnimplementedSearchServiceServer) testEmbeddedByValue()                       {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SearchService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/search.proto",
}

const (
	InferenceService_Summarize_FullMethodName       = "/search.InferenceService/Summarize"
	InferenceService_SummarizeStream_FullMethodName = "/search.InferenceService/SummarizeStream"
	InferenceService_HealthCheck_FullMethodName     = "/search.InferenceService/HealthCheck"
)

// InferenceServiceClient is the client API for InferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Inference service definitions
type InferenceServiceClient interface {
	Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error)
	SummarizeStream(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizeStreamResponse], error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type inferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceServiceClient(cc grpc.ClientConnInterface) InferenceServiceClient {
	return &inferenceServiceClient{cc}
}

func (c *inferenceServiceClient) Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizeResponse)
	err := c.cc.Invoke(ctx, InferenceService_Summarize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceServiceClient) SummarizeStream(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InferenceService_ServiceDesc.Streams[0], InferenceService_SummarizeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SummarizeRequest, SummarizeStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InferenceService_SummarizeStreamClient = grpc.ServerStreamingClient[SummarizeStreamResponse]

func (c *inferenceServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, InferenceService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InferenceServiceServer is the server API for InferenceService service.
// All implementations must embed UnimplementedInferenceServiceServer
// for forward compatibility.
//
// Inference service definitions
type InferenceServiceServer interface {
	Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error)
	SummarizeStream(*SummarizeRequest, grpc.ServerStreamingServer[SummarizeStreamResponse]) error
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedInferenceServiceServer()
}

// UnimplementedInferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInferenceServiceServer struct{}

func (UnimplementedInferenceServiceServer) Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summarize not implemented")
}
func (UnimplementedInferenceServiceServer) SummarizeStream(*SummarizeRequest, grpc.ServerStreamingServer[SummarizeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SummarizeStream not implemented")
}
func (UnimplementedInferenceServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedInferenceServiceServer) mustEmbedUnimplementedInferenceServiceServer() {}
func (UnimplementedInferenceServiceServer) testEmbeddedByValue()                          {}

// UnsafeInferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceServiceServer will
// result in compilation errors.
type UnsafeInferenceServiceServer interface {
	mustEmbedUnimplementedInferenceServiceServer()
}

func RegisterInferenceServiceServer(s grpc.ServiceRegistrar, srv InferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedInferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InferenceService_ServiceDesc, srv)
}

func _InferenceService_Summarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServiceServer).Summarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InferenceService_Summarize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServiceServer).Summarize(ctx, req.(*SummarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InferenceService_SummarizeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummarizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InferenceServiceServer).SummarizeStream(m, &grpc.GenericServerStream[SummarizeRequest, SummarizeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InferenceService_SummarizeStreamServer = grpc.ServerStreamingServer[SummarizeStreamResponse]

func _InferenceService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InferenceService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InferenceService_ServiceDesc is the grpc.ServiceDesc for InferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.InferenceService",
	HandlerType: (*InferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Summarize",
			Handler:    _InferenceService_Summarize_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _InferenceService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SummarizeStream",
			Handler:       _InferenceService_SummarizeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/search.proto",
}

const (
	SafetyService_ValidateInput_FullMethodName  = "/search.SafetyService/ValidateInput"
	SafetyService_SanitizeOutput_FullMethodName = "/search.SafetyService/SanitizeOutput"
	SafetyService_HealthCheck_FullMethodName    = "/search.SafetyService/HealthCheck"
)

// SafetyServiceClient is the client API for SafetyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Safety service definitions
type SafetyServiceClient interface {
	ValidateInput(ctx context.Context, in *ValidateInputRequest, opts ...grpc.CallOption) (*ValidateInputResponse, error)
	SanitizeOutput(ctx context.Context, in *SanitizeOutputRequest, opts ...grpc.CallOption) (*SanitizeOutputResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type safetyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSafetyServiceClient(cc grpc.ClientConnInterface) SafetyServiceClient {
	return &safetyServiceClient{cc}
}

func (c *safetyServiceClient) ValidateInput(ctx context.Context, in *ValidateInputRequest, opts ...grpc.CallOption) (*ValidateInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateInputResponse)
	err := c.cc.Invoke(ctx, SafetyService_ValidateInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) SanitizeOutput(ctx context.Context, in *SanitizeOutputRequest, opts ...grpc.CallOption) (*SanitizeOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SanitizeOutputResponse)
	err := c.cc.Invoke(ctx, SafetyService_SanitizeOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safetyServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, SafetyService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SafetyServiceServer is the server API for SafetyService service.
// All implementations must embed UnimplementedSafetyServiceServer
// for forward compatibility.
//
// Safety service definitions
type SafetyServiceServer interface {
	ValidateInput(context.Context, *ValidateInputRequest) (*ValidateInputResponse, error)
	SanitizeOutput(context.Context, *SanitizeOutputRequest) (*SanitizeOutputResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedSafetyServiceServer()
}

// UnimplementedSafetyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSafetyServiceServer struct{}

func (UnimplementedSafetyServiceServer) ValidateInput(context.Context, *ValidateInputRequest) (*ValidateInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInput not implemented")
}
func (UnimplementedSafetyServiceServer) SanitizeOutput(context.Context, *SanitizeOutputRequest) (*SanitizeOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SanitizeOutput not implemented")
}
func (UnimplementedSafetyServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSafetyServiceServer) mustEmbedUnimplementedSafetyServiceServer() {}
func (UnimplementedSafetyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSafetyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SafetyServiceServer will
// result in compilation errors.
type UnsafeSafetyServiceServer interface {
	mustEmbedUnimplementedSafetyServiceServer()
}

func RegisterSafetyServiceServer(s grpc.ServiceRegistrar, srv SafetyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSafetyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SafetyService_ServiceDesc, srv)
}

func _SafetyService_ValidateInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).ValidateInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_ValidateInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).ValidateInput(ctx, req.(*ValidateInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_SanitizeOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SanitizeOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).SanitizeOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_SanitizeOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).SanitizeOutput(ctx, req.(*SanitizeOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SafetyService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafetyServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SafetyService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafetyServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SafetyService_ServiceDesc is the grpc.ServiceDesc for SafetyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SafetyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.SafetyService",
	HandlerType: (*SafetyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateInput",
			Handler:    _SafetyService_ValidateInput_Handler,
		},
		{
			MethodName: "SanitizeOutput",
			Handler:    _SafetyService_SanitizeOutput_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SafetyService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/search.proto",
}

const (
	LLMOrchestratorService_ProcessRequest_FullMethodName = "/search.LLMOrchestratorService/ProcessRequest"
	LLMOrchestratorService_StreamRequest_FullMethodName  = "/search.LLMOrchestratorService/StreamRequest"
	LLMOrchestratorService_GetStatus_FullMethodName      = "/search.LLMOrchestratorService/GetStatus"
	LLMOrchestratorService_HealthCheck_FullMethodName    = "/search.LLMOrchestratorService/HealthCheck"
)

// LLMOrchestratorServiceClient is the client API for LLMOrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LLM Orchestrator service definitions
type LLMOrchestratorServiceClient interface {
	ProcessRequest(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
	StreamRequest(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LLMStreamResponse], error)
	GetStatus(ctx context.Context, in *LLMStatusRequest, opts ...grpc.CallOption) (*LLMStatusResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type lLMOrchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMOrchestratorServiceClient(cc grpc.ClientConnInterface) LLMOrchestratorServiceClient {
	return &lLMOrchestratorServiceClient{cc}
}

func (c *lLMOrchestratorServiceClient) ProcessRequest(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, LLMOrchestratorService_ProcessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMOrchestratorServiceClient) StreamRequest(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LLMStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMOrchestratorService_ServiceDesc.Streams[0], LLMOrchestratorService_StreamRequest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LLMRequest, LLMStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMOrchestratorService_StreamRequestClient = grpc.ServerStreamingClient[LLMStreamResponse]

func (c *lLMOrchestratorServiceClient) GetStatus(ctx context.Context, in *LLMStatusRequest, opts ...grpc.CallOption) (*LLMStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMStatusResponse)
	err := c.cc.Invoke(ctx, LLMOrchestratorService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMOrchestratorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LLMOrchestratorService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMOrchestratorServiceServer is the server API for LLMOrchestratorService service.
// All implementations must embed UnimplementedLLMOrchestratorServiceServer
// for forward compatibility.
//
// LLM Orchestrator service definitions
type LLMOrchestratorServiceServer interface {
	ProcessRequest(context.Context, *LLMRequest) (*LLMResponse, error)
	StreamRequest(*LLMRequest, grpc.ServerStreamingServer[LLMStreamResponse]) error
	GetStatus(context.Context, *LLMStatusRequest) (*LLMStatusResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLLMOrchestratorServiceServer()
}

// UnimplementedLLMOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMOrchestratorServiceServer struct{}

func (UnimplementedLLMOrchestratorServiceServer) ProcessRequest(context.Context, *LLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedLLMOrchestratorServiceServer) StreamRequest(*LLMRequest, grpc.ServerStreamingServer[LLMStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequest not implemented")
}
func (UnimplementedLLMOrchestratorServiceServer) GetStatus(context.Context, *LLMStatusRequest) (*LLMStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedLLMOrchestratorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLLMOrchestratorServiceServer) mustEmbedUnimplementedLLMOrchestratorServiceServer() {
}
func (UnimplementedLLMOrchestratorServiceServer) testEmbeddedByValue() {}

// UnsafeLLMOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMOrchestratorServiceServer will
// result in compilation errors.
type UnsafeLLMOrchestratorServiceServer interface {
	mustEmbedUnimplementedLLMOrchestratorServiceServer()
}

func RegisterLLMOrchestratorServiceServer(s grpc.ServiceRegistrar, srv LLMOrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedLLMOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMOrchestratorService_ServiceDesc, srv)
}

func _LLMOrchestratorService_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMOrchestratorServiceServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMOrchestratorService_ProcessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMOrchestratorServiceServer).ProcessRequest(ctx, req.(*LLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMOrchestratorService_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LLMRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMOrchestratorServiceServer).StreamRequest(m, &grpc.GenericServerStream[LLMRequest, LLMStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMOrchestratorService_StreamRequestServer = grpc.ServerStreamingServer[LLMStreamResponse]

func _LLMOrchestratorService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMOrchestratorServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMOrchestratorService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMOrchestratorServiceServer).GetStatus(ctx, req.(*LLMStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMOrchestratorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMOrchestratorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMOrchestratorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMOrchestratorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMOrchestratorService_ServiceDesc is the grpc.ServiceDesc for LLMOrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMOrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.LLMOrchestratorService",
	HandlerType: (*LLMOrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _LLMOrchestratorService_ProcessRequest_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _LLMOrchestratorService_GetStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LLMOrchestratorService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRequest",
			Handler:       _LLMOrchestratorService_StreamRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/search.proto",
}
