syntax = "proto3";

package search;

option go_package = "./proto";

// Search service definitions
service SearchService {
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}


// Inference service definitions
service InferenceService {
  rpc Summarize(SummarizeRequest) returns (SummarizeResponse);
  rpc SummarizeStream(SummarizeRequest) returns (stream SummarizeStreamResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Safety service definitions
service SafetyService {
  rpc ValidateInput(ValidateInputRequest) returns (ValidateInputResponse);
  rpc SanitizeOutput(SanitizeOutputRequest) returns (SanitizeOutputResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// LLM Orchestrator service definitions
service LLMOrchestratorService {
  rpc ProcessRequest(LLMRequest) returns (LLMResponse);
  rpc StreamRequest(LLMRequest) returns (stream LLMStreamResponse);
  rpc GetStatus(LLMStatusRequest) returns (LLMStatusResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Common messages
message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
  string service = 2;
  int64 timestamp = 3;
}

// Search messages
message SearchRequest {
  string query = 1;
  bool safe_search = 2;
  int32 num_results = 3;
}

message SearchResponse {
  repeated SearchResult results = 1;
  string query = 2;
  bool success = 3;
  string error = 4;
}

message SearchResult {
  string title = 1;
  string url = 2;
  string snippet = 3;
  string display_url = 4;
}


// Inference messages
message SummarizeRequest {
  string original_text = 1;
  bool streaming = 2;
  int32 max_length = 3;
}

message SummarizeResponse {
  string summary = 1;
  bool success = 2;
  string error = 3;
  int32 tokens_used = 4;
  float confidence = 5;
}

message SummarizeStreamResponse {
  string token = 1;
  bool is_final = 2;
  string error = 3;
  int32 position = 4;
}

// Safety messages
message ValidateInputRequest {
  string text = 1;
  string client_ip = 2;
  bool safe_search = 3;
}

message ValidateInputResponse {
  bool is_safe = 1;
  string sanitized_text = 2;
  repeated string warnings = 3;
  string error = 4;
}

message SanitizeOutputRequest {
  string text = 1;
}

message SanitizeOutputResponse {
  string sanitized_text = 1;
  repeated string warnings = 2;
  string error = 3;
}

// LLM Orchestrator messages
message LLMRequest {
  string id = 1;
  string text = 2;
  int32 max_tokens = 3;
  bool stream = 4;
  int64 created_at = 5;
}

message LLMResponse {
  string id = 1;
  repeated string tokens = 2;
  string summary = 3;
  string error = 4;
  bool complete = 5;
}

message LLMStatusRequest {
  string request_id = 1;
}

message LLMStatusResponse {
  string request_id = 1;
  string status = 2; // pending, processing, completed, failed
  int32 queue_position = 3;
  int32 estimated_wait_time = 4; // seconds
  string error = 5;
}

message LLMStreamResponse {
  string id = 1;
  string token = 2;
  bool is_final = 3;
  string error = 4;
  int32 position = 5;
} 