# Docker Compose file for AI Search Engine with Monitoring

services:
  # Safety service
  safety:
    build:
      context: .
      dockerfile: Dockerfile.microservice
      args:
        SERVICE_NAME: safety
    ports:
      - "8084:8084"
    environment:
      - SERVICE_NAME=safety
      - LOG_LEVEL=info
    networks:
      - ai-search-network

  # Search service
  search:
    build:
      context: .
      dockerfile: Dockerfile.microservice
      args:
        SERVICE_NAME: search
    ports:
      - "8081:8081"
    environment:
      - SERVICE_NAME=search
      - LOG_LEVEL=info
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - GOOGLE_CX=${GOOGLE_CX:-}
    networks:
      - ai-search-network

  # Python Tokenizer service (Real BART tokenization + detokenization)
  tokenizer:
    build:
      context: .
      dockerfile: Dockerfile.tokenizer-python
    ports:
      - "8090:8090"
    environment:
      - TRANSFORMERS_CACHE=/app/models
      - HF_HOME=/app/models
      - TOKENIZER_PORT=8090
    volumes:
      - tokenizer_models:/app/models  # Persist tokenizer models
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G  # More memory for tokenizer models
        reservations:
          cpus: '1.0'
          memory: 1G
    networks:
      - ai-search-network

  # Python Inference service (Real BART summarization, Mac optimized)
  inference:
    build:
      context: .
      dockerfile: Dockerfile.inference-python
    ports:
      - "8083:8083"
    environment:
      - INFERENCE_MODEL=facebook/bart-large-cnn
      - TRANSFORMERS_CACHE=/app/models
      - HF_HOME=/app/models
    volumes:
      - inference_models:/app/models  # Persist model cache
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G  # More memory for BART model
        reservations:
          cpus: '2.0'
          memory: 2G
    networks:
      - ai-search-network

  llm:
    build:
      context: .
      dockerfile: Dockerfile.microservice
      args:
        SERVICE_NAME: llm
    ports:
      - "8086:8086"
    command: ["./llm"]
    environment:
      - SERVICE_NAME=llm
      - TOKENIZER_HOST=tokenizer
      - INFERENCE_HOST=inference
      - LLM_MAX_WORKERS=10
      - LLM_PORT=8086
      - LOG_LEVEL=info
    depends_on:
      - tokenizer
      - inference
    networks:
      - ai-search-network
    restart: unless-stopped

  # Gateway service
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8080:8080"
    environment:
      - SEARCH_HOST=search
      - TOKENIZER_HOST=tokenizer
      - INFERENCE_HOST=inference
      - SAFETY_HOST=safety
      - LLM_HOST=llm
      - LOG_LEVEL=info
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - GOOGLE_CX=${GOOGLE_CX:-}
    depends_on:
      - safety
      - search
      - tokenizer
      - inference
      - llm
    networks:
      - ai-search-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-search-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - ai-search-network

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ai-search-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8087:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - ai-search-network

volumes:
  prometheus_data:
  grafana_data:
  tokenizer_models:  # Persist tokenizer model downloads
  inference_models:  # Persist inference model downloads

networks:
  ai-search-network:
    driver: bridge 